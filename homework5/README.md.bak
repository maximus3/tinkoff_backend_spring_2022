# Movie Rating Service

## Description

Данный сервис предоставляет возможность пользователю просматривать и оценивать фильмы по их названию.

Взаимодействие происходит через REST API.

Добавление новых фильмов возможно через admin-панель.

Отзыв и оценку фильму можно поставить post-запросом на адрес:

```
/reviews/{movie_id}/
/ratings/{movie_id}/
```

## Commands

### Docker clean, build, up, clean
    make docker

### Up docker containers:
    make docker-up

### Down docker containers:
    make docker-down

### Create venv (if no docker):
    make venv

### Run app:
    make run

### Run tests:
    make test

### Run linters:
    make lint

### Run formatters:
    make format

### Run format and lint code then run tests:
    make check

## Task Description:

Представьте, что вас просят помочь с разработкой портала, где пользователи могут обмениваться обзорами фильмов и оценивать их. Ваша задача спроектировать API и реализовать сервер, с учетом всех требований.

### Бизнес-логика

Через апи можно заводить новых пользователей по login/password. Все остальные действия, кроме создания нового пользователя, доступны только по авторизации (используем протокол basic auth).

Важно: на стороне сервиса не храним пароли, а только хеши от них, достаточные для проверки пароля.

Пользователи могут ставить фильмам оценки или оставлять свои отзывы. Оценка — это число от 0 до 10, а отзыв — это произвольный текст. Ставить оценки или писать отзывы пользователи могут только от своего имени.

Для каждого фильма должна быть возможность узнать среднюю оценку, кол-во оценок, кол-во отзывов.

Дополнительно нужна возможность запрашивать фильмы с фильтрацией по:

* подстроке в названии
* году выхода
* с опциональной сортировкой по средней оценке (ТОП 100 например)
* Если ручка возвращает список элементов (например, список фильмов), то должна быть возможность разделить такой список на несколько частей - т.е. должна присутствовать пагинация.

### Обязательные требования

* Покрыть сервис тестами (make test)
* Покрыть код аннотациями типов (make lint запускает mypy для проверки)
* Код должен проходить проверки линтеров и быть автоматически отформатирован (make format lint)
* Сервис запускается по команде make up
* Все зависимости фиксируются через poetry
* Используйте sqlite (допускается хранить данные в памяти процесса)
* REST-API
* Сервис должен быть написан с использованием FastAPI
* В качестве ORM используем sqlalchemy
* Сервис должен запускаться в docker-контейнере

### Усложненный вариант

Создать административную панель для управления базой данных, используя flask_admin. Через админку можно добавлять/удалять фильмы, просматривать информацию по пользователям ( имя пользователя и его оценки к фильмам ), редактировать текст отзыва.